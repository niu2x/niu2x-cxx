# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]

    steps:
    - uses: actions/checkout@v3

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-nxlua-dir=${{ github.workspace }}/build-nxlua" >> "$GITHUB_OUTPUT"
        echo "build-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "install-dir=${{ github.workspace }}/dist" >> "$GITHUB_OUTPUT"

    - name: Configure Static Library Build
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DBUILD_SHARED_LIBS=OFF
        -S ${{ github.workspace }}

    - name: Build Static Library
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-dir }} --config ${{ matrix.build_type }}

    - name: Install Static Library
      run: cmake --install ${{ steps.strings.outputs.build-dir }} --prefix ${{ steps.strings.outputs.install-dir }} 

    - name: Pack Static Library
      run: >
        cd ${{ steps.strings.outputs.build-dir }}
        cpack -G ZIP

    - name: Archive Static Library
      uses: actions/upload-artifact@v3
      with:
        name: NIU2X_CPP_LIBRARY-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          ${{ steps.strings.outputs.build-dir }}/NIU2X_CPP_LIBRARY-*.zip

    - name: Configure nxlua
      run: >
        cmake -B ${{ steps.strings.outputs.build-nxlua-dir }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -Dniu2x_lua_DIR=${{ steps.strings.outputs.install-dir }}/lib/cmake/niu2x
        -S ${{ github.workspace }}/app/nxlua

    - name: Build nxlua
      run: cmake --build ${{ steps.strings.outputs.build-nxlua-dir }} --config ${{ matrix.build_type }}

    
